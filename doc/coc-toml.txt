*coc-toml.txt*          toml analyzer, parser and formatter extension for vim.

Version: 0.1.3
Author: kkiyama117 <k.kiyama117@gmail.com>
License: MIT license

==============================================================================
CONTENTS                                                   *coc-toml-contents*

Introduction    |coc-toml-introduction|
Install         |coc-toml-install|
  External schemas         |coc-toml-install-external-schemas|
Interface       |coc-toml-interface|
  Mappings        |coc-toml-mappings|
  Commands        |coc-toml-commands|
  Options         |coc-toml-options|

==============================================================================
INTRODUCTION                                           *coc-toml-introduction*

There are many plugins for vim with lsp or coc-nvim. But, there are no toml
analyzer for vim. Even more there are few standalone lsp for toml.

This plugin aims for writing toml much easier and making better lsp of toml
able to be used in other editor also.

==============================================================================
INSTALL                                                     *coc-toml-install*

                                               *coc-toml-install-requirements*
Requirements~

- Neovim or vim alternative(Required to be work with coc-nvim).
- coc-nvim and its requirements
- (Optional) vim plugin manager. (If you use non-default branch version)

                                            *coc-toml-install-external-schema*
External schema~

You can add external schema not included in taplo.
For example, if you apply dein toml schema to toml file including `toml` in
file name, open `:CocConfig` and write config like this.

>
  (other configs ...)
  "toml.schema.associations": {
    ".*/Cargo\\.toml": "https://raw.githubusercon ... cargo.toml.json",
    ".*/\\.?taplo\\.toml": "taplo://taplo.toml"
  },
  (other configs ...)
>

To check default config, please see `package.json` of this package. 
See |coc-toml-options-schema-associations| and homepage of taplo
( https://taplo.tamasfe.dev/configuration/#schema )for details.

==============================================================================
INTERFACE                                                 *coc-toml-interface*

------------------------------------------------------------------------------
MAPPINGS                                                   *coc-toml-mappings*

Note:
   This plugin has no unique keymaps now.
   Use your own keybinding or commands for coc.nvim.

------------------------------------------------------------------------------
COMMANDS                                                   *coc-toml-commands*

                                                *coc-toml-commands-syntaxTree*
toml.syntaxTree~
        show syntaxTree like `rust-analyzer` does.

                                                *coc-toml-commands-tomlToJson*
toml.tomlToJson~
        convert toml to Json. If you run it with visualmode, convert toml in
        selected range instead of it in the whole of document.

                                                    *coc-toml-commands-reload*
toml.reload~
        reload this plugin and taplo instance.

------------------------------------------------------------------------------
OPTIONS                                                     *coc-toml-options*

All this options have default value, so we can use coc-toml without any
settings. write this settings at coc-settings.json if you change behavior.

                                                    *coc-toml-options-enabled*
toml.enabled~
        type: boolean
        default: true

        Enable coc-toml extension.

                                           *coc-toml-options-activationStatus*
toml.activationStatus~
        type: boolean
        scope: resource
        default: true

        Show a status bar message while the extension is activating.

                                                *coc-toml-options-taploConfig*
toml.taploConfig~
        type: string
        scope: resource

        An absolute, or workspace relative path to the Taplo
        configuration file.

                                         *coc-toml-options-taploConfigEnabled*
toml.taploConfigEnabled~
        type: boolean
        scope: resource
        default: true

        Whether to enable the usage of a Taplo configuration file.

                                             *coc-toml-options-semanticTokens*
toml.semanticTokens~
        type: boolean
        scope: resource
        default: false

        Enable semantic tokens for inline table and array keys. If enabled,
        keys of arrays and inline tables will have the same color as table
        headers and array of tables headers.

                                     *coc-toml-options-formatter-alignEntries*
toml.formatter.alignEntries~
        type: boolean
        scope: resource
        default: false
        Align consecutive entries vertically.

                               *coc-toml-options-formatter-arrayTrailingComma*
toml.formatter.arrayTrailingComma~
        type: boolean
        scope: resource
        default: true

        Append trailing commas for multi-line arrays.

                                  *coc-toml-options-formatter-arrayAutoExpand*
toml.formatter.arrayAutoExpand~
        type: boolean
        scope: resource
        default: true

        Expand arrays to multiple lines that exceed the maximum column width.

                                *coc-toml-options-formatter-arrayAutoCollapse*
toml.formatter.arrayAutoCollapse~
        type: boolean
        scope: resource
        default: true

        Collapse arrays that don't exceed the maximum column width and don't
        contain comments.

                                    *coc-toml-options-formatter-compactArrays*
toml.formatter.compactArrays~
        type: boolean
        scope: resource
        default: true

        Omit white space padding from single-line arrays.

                              *coc-toml-options-formatter-compactInlineTables*
toml.formatter.compactInlineTables~
        type: boolean
        scope: resource
        default: false

        Omit white space padding from the start and end of inline tables.

                                      *coc-toml-options-formatter-columnWidth*
toml.formatter.columnWidth~
        type: number
        minimum: 0
        default: 80

        Maximum column width in characters, affects array expansion and
        collapse, this doesn't take whitespace into account.

                                     *coc-toml-options-formatter-indentTables*
toml.formatter.indentTables~
        type: boolean
        scope: resource
        default: false

        Indent based on tables and arrays of tables and their subtables,
        subtables out of order are not indented.

                                     *coc-toml-options-formatter-indentString*
toml.formatter.indentString~
        type: [string | null]
        scope: resource
        default: null

        The substring that is used for indentation, should be tabs or spaces,
        but technically can be anything. Uses the IDE setting if not set.

                                      *coc-toml-options-formatter-reorderKeys*
toml.formatter.reorderKeys~
        type: boolean
        scope: resource
        default: false

        Alphabetically reorder keys that are not separated by empty lines.

                                *coc-toml-options-formatter-allowedBlankLines*
toml.formatter.allowedBlankLines~
        type: integer
        scope: resource
        minimum: 0
        default: 2

        Maximum amount of allowed consecutive blank lines. This does not
        affect the whitespace at the end of the document, as it is always
        stripped.

                                  *coc-toml-options-formatter-trailingNewline*
toml.formatter.trailingNewline~
        type: boolean
        scope: resource
        default: true

        Add trailing newline at the end of the file if not present.

                                             *coc-toml-options-formatter-crlf*
toml.formatter.crlf~
        type: boolean
        scope: resource
        default: false
        Use CRLF for line endings.

                                             *coc-toml-options-schema-enabled*
toml.schema.enabled~
        type: boolean
        scope: resource
        default: true

        Enable completion and validation based on JSON schemas.

                                               *coc-toml-options-schema-links*
toml.schema.links~
        type: boolean
        scope: resource
        default: false

        Enable editor links.

                                   *coc-toml-options-schema-repositoryEnabled*
toml.schema.repositoryEnabled~
        type: boolean
        scope: resource
        default: true

        Whether to use schemas from the provided schema repository.

                                       *coc-toml-options-schema-repositoryUrl*
toml.schema.repositoryUrl~
        type: string
        scope: resource
        default: "/home/kiyama/programs/mine/vim/coc-toml/package.json"

        A HTTP(S) URL that points to a schema index.

                                        *coc-toml-options-schema-associations*
toml.schema.associations~
        type: object
        scope: resource
        default: {
          "^(.*(/|\\\\)\\.?taplo\\.toml|\\.?taplo\\.toml)$":
              "taplo://taplo.toml",
          ".*/\\.*dein.*\\.toml": 
              "https://gist.githubusercontent.com/kkiyama117/" \
              "fda8e271801a2e34ef2409c167e1ebdb/raw/" \
              "7dcdce1ae79041a70aeb8526dcdb32b7c07f31ff/dein.json"
        }

        Document and schema associations.
        The key must be a regular expression, this pattern is used to
        associate schemas with absolute document URIs. On multiple
        matches the first one is used in an undefined order.
        The value must be an absolute URI to the JSON schema, for
        supported values and more information [read here]
        (https://github.com/tamasfe/taplo/tree/master/schemas).

                       *coc-toml-options-actions-ignoreDeprecatedAssociations*
toml.actions.ignoreDeprecatedAssociations~
        type: boolean
        scope: resource
        default: false

        Whether to ignore deprecated builtin associations.

                                                      *coc-toml-options-debug*
toml.debug~
        type: boolean
        scope: resource
        default: false

        Enable features to debug the extension.

==============================================================================
vim:ft=help:tw=78:sw=4:ts=8:sts=0:nosta:norl:noet:fen:fdm=marker:fdl=0:

